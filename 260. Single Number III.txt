Solution 1:
Sort the array and in every subset of two numbers, compare the two numbers, return the first one if different. 
Then, reduce the current index by one and repeat the previous step to find the second single number, if no good until the loop stops, return the last element of the whole array
Time Complexity: O(n)
Without Using Extra Memory

Solution 2:
Do XOR operation for all numbers in the array to get XOR of the two single numbers.
For the XOR result, find the Kst bit that equals to 1, which indicates difference exists between two single numbers.
Use the Kst bit to split the array into two parts, move the Kth bit to the very right and XOR with 0 to get the first single number.
With the first number, do XOR operation with previous XOR result to get the second one.
Time Complexity: O(1)
Without Using Extra Memory